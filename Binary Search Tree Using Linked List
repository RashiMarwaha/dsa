#include <iostream>
#include <queue>
using namespace std;
class Node
{
    public:
    int data;
    Node *left;
    Node *right;
    Node(int val)
    {
        data=val;
        left=NULL;
        right=NULL;
    }
};
class LinkedListBST
{
    public:
    Node *root;
    LinkedListBST()
    {
        root=NULL;
    }
    Node *insert(Node *node, int val)
    {
        if(node==NULL)
        {
            return new Node(val);
        }
        if(val<node->data)
        {
            node->left=insert(node->left,val);
        }
        else if(val>node->data)
        {
            node->right=insert(node->right,val);
        }
        return node;
    }
    bool search(Node *node, int val)
    {
        if(node==NULL) return false;
        if(node->data==val) return true;
        if(val<node->data) return search(node->left,val);
        else return search(node->right,val);
    }
    Node *findMin(Node *node)
    {
        while(node && node->left !=NULL)
        {
            node=node->left;
        }
        return node;
    }
    Node *deleteValue(Node *node, int val)
    {
        if(node==NULL) return node;
        if(val<node->data)
        {
            node->left=deleteValue(node->left,val);
        }
        if(val>node->data)
        {
            node->right=deleteValue(node->right,val);
        }
        else
        {
            if(node->left==NULL)
            {
                Node *temp=node->right;
                delete node;
                return temp;
            }
            else if(node->right==NULL)
            {
                Node *temp=node->left;
                delete node;
                return temp;
            }
            Node *temp=findMin(node->right);
            node->data=temp->data;
            node->right=deleteValue(node->right,temp->data);
        }
        return node;
    }
    void inorder(Node *node)
    {
        if(node!=NULL)
        {
            inorder(node->left);
            cout<<node->data<<" ";
            inorder(node->right);
        }
    }
    void preorder(Node *node)
    {
        if(node!=NULL)
        {
            cout<<node->data<<" ";
            preorder(node->left);
            preorder(node->right);
        }
    }
    void postorder(Node *node)
    {
        if(node!=NULL)
        {
            postorder(node->left);
            postorder(node->right);
            cout<<node->data<<" ";
        }
    }
    void levelorder()
    {
        if(root==NULL) return;
        queue <Node*> q;
        q.push(root);
        while(!q.empty())
        {
            Node *current = q.front();
            q.pop();
            cout<<current->data<<" ";
            if(current->left!=NULL)
            {
                q.push(current->left);
            }
            if(current->right!=NULL)
            {
                q.push(current->right);
            }
        }
    }
};

int main() {
    LinkedListBST tree;
    tree.root = tree.insert(tree.root, 50);
    tree.insert(tree.root, 30);
    tree.insert(tree.root, 70);
    tree.insert(tree.root, 20);
    tree.insert(tree.root, 40);
    tree.insert(tree.root, 60);
    tree.insert(tree.root, 80);
    cout << "Inorder: ";
    tree.inorder(tree.root);
    cout << endl;

    cout << "Preorder: ";
    tree.preorder(tree.root);
    cout << endl;

    cout << "Postorder: ";
    tree.postorder(tree.root);
    cout << endl;

    cout << "Level-order: ";
    tree.levelorder();
    cout << endl;
    //Search
    cout << "Search 40: " << (tree.search(tree.root, 40) ? "Found" : "Not Found") << endl;

    //Delete
    tree.root = tree.deleteValue(tree.root, 40);
    cout << "Inorder after deleting 40: ";
    tree.inorder(tree.root);
    cout << endl;

    return 0;
}
